#!/usr/bin/env python3

# https://leetcode-cn.com/problems/valid-sudoku
# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
# 数独部分空格内已填入了数字，空白格用 '.' 表示。
#
# 示例 2:
# 输入:
# 输出: false
# 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
#      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
#
# 说明:
# 一个有效的数独（部分已被填充）不一定是可解的。
# 只需要根据以上规则，验证已经填入的数字是否有效即可。
# 给定数独序列只包含数字 1-9 和字符 '.' 。
# 给定数独永远是 9x9 形式的。


class Solution:
    def isValidSudoku(self, board: [[str]]) -> bool:
        rowList = [[True] * 9 for i in range(9)]
        columnList = [[True] * 9 for i in range(9)]
        blockList = [[True] * 9 for i in range(9)]

        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == '.':
                    continue
                val = int(board[i][j]) - 1
                blockIdx = i // 3 * 3 + j // 3
                if rowList[i][val] and columnList[j][val] and blockList[blockIdx][val]:
                    rowList[i][val] = False
                    columnList[j][val] = False
                    blockList[blockIdx][val] = False
                else:
                    return False
        return True


print(Solution().isValidSudoku([
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]))  # True

print(Solution().isValidSudoku([
    ["8", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]))  # False

print(Solution().isValidSudoku(
    [[".", "8", "7", "6", "5", "4", "3", "2", "1"],
     ["2", ".", ".", ".", ".", ".", ".", ".", "."],
     ["3", ".", ".", ".", ".", ".", ".", ".", "."],
     ["4", ".", ".", ".", ".", ".", ".", ".", "."],
     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])) # True
